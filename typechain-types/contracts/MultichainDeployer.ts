/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface MultichainDeployerInterface extends utils.Interface {
  functions: {
    "VERSION()": FunctionFragment;
    "deploy(uint256,bytes32,bytes)": FunctionFragment;
    "instanceOf(bytes32,bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "VERSION" | "deploy" | "instanceOf"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deploy",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "instanceOf",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "instanceOf", data: BytesLike): Result;

  events: {
    "Deployed(address,bytes32,bytes32,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deployed"): EventFragment;
}

export interface DeployedEventObject {
  instance: string;
  salt: string;
  bytecodeHash: string;
  factory: string;
}
export type DeployedEvent = TypedEvent<
  [string, string, string, string],
  DeployedEventObject
>;

export type DeployedEventFilter = TypedEventFilter<DeployedEvent>;

export interface MultichainDeployer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MultichainDeployerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    VERSION(overrides?: CallOverrides): Promise<[string]>;

    deploy(
      amount_: PromiseOrValue<BigNumberish>,
      salt_: PromiseOrValue<BytesLike>,
      bytecode_: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    instanceOf(
      salt_: PromiseOrValue<BytesLike>,
      bytecodeHash_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { instance: string; isDeployed: boolean }>;
  };

  VERSION(overrides?: CallOverrides): Promise<string>;

  deploy(
    amount_: PromiseOrValue<BigNumberish>,
    salt_: PromiseOrValue<BytesLike>,
    bytecode_: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  instanceOf(
    salt_: PromiseOrValue<BytesLike>,
    bytecodeHash_: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[string, boolean] & { instance: string; isDeployed: boolean }>;

  callStatic: {
    VERSION(overrides?: CallOverrides): Promise<string>;

    deploy(
      amount_: PromiseOrValue<BigNumberish>,
      salt_: PromiseOrValue<BytesLike>,
      bytecode_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    instanceOf(
      salt_: PromiseOrValue<BytesLike>,
      bytecodeHash_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { instance: string; isDeployed: boolean }>;
  };

  filters: {
    "Deployed(address,bytes32,bytes32,string)"(
      instance?: PromiseOrValue<string> | null,
      salt?: PromiseOrValue<BytesLike> | null,
      bytecodeHash?: PromiseOrValue<BytesLike> | null,
      factory?: null
    ): DeployedEventFilter;
    Deployed(
      instance?: PromiseOrValue<string> | null,
      salt?: PromiseOrValue<BytesLike> | null,
      bytecodeHash?: PromiseOrValue<BytesLike> | null,
      factory?: null
    ): DeployedEventFilter;
  };

  estimateGas: {
    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    deploy(
      amount_: PromiseOrValue<BigNumberish>,
      salt_: PromiseOrValue<BytesLike>,
      bytecode_: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    instanceOf(
      salt_: PromiseOrValue<BytesLike>,
      bytecodeHash_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deploy(
      amount_: PromiseOrValue<BigNumberish>,
      salt_: PromiseOrValue<BytesLike>,
      bytecode_: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    instanceOf(
      salt_: PromiseOrValue<BytesLike>,
      bytecodeHash_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
