/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IZKBridgeInterface extends utils.Interface {
  functions: {};

  events: {
    "Deposited(address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "NewBridgeState(uint256)": EventFragment;
    "VerifierUpdated(address,address)": EventFragment;
    "Withdrawn(address,address,uint256,uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewBridgeState"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VerifierUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export interface DepositedEventObject {
  token: string;
  account: string;
  value: BigNumber;
  root: BigNumber;
  leafIdx: BigNumber;
  commitment: BigNumber;
}
export type DepositedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  DepositedEventObject
>;

export type DepositedEventFilter = TypedEventFilter<DepositedEvent>;

export interface NewBridgeStateEventObject {
  stateRoot: BigNumber;
}
export type NewBridgeStateEvent = TypedEvent<
  [BigNumber],
  NewBridgeStateEventObject
>;

export type NewBridgeStateEventFilter = TypedEventFilter<NewBridgeStateEvent>;

export interface VerifierUpdatedEventObject {
  currentAddr: string;
  newAddr: string;
}
export type VerifierUpdatedEvent = TypedEvent<
  [string, string],
  VerifierUpdatedEventObject
>;

export type VerifierUpdatedEventFilter = TypedEventFilter<VerifierUpdatedEvent>;

export interface WithdrawnEventObject {
  token: string;
  to: string;
  value: BigNumber;
  nullifierHash: BigNumber;
  relayer: string;
  fee: BigNumber;
}
export type WithdrawnEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, string, BigNumber],
  WithdrawnEventObject
>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface IZKBridge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IZKBridgeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "Deposited(address,address,uint256,uint256,uint256,uint256)"(
      token?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      value?: PromiseOrValue<BigNumberish> | null,
      root?: null,
      leafIdx?: null,
      commitment?: null
    ): DepositedEventFilter;
    Deposited(
      token?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      value?: PromiseOrValue<BigNumberish> | null,
      root?: null,
      leafIdx?: null,
      commitment?: null
    ): DepositedEventFilter;

    "NewBridgeState(uint256)"(
      stateRoot?: PromiseOrValue<BigNumberish> | null
    ): NewBridgeStateEventFilter;
    NewBridgeState(
      stateRoot?: PromiseOrValue<BigNumberish> | null
    ): NewBridgeStateEventFilter;

    "VerifierUpdated(address,address)"(
      currentAddr?: PromiseOrValue<string> | null,
      newAddr?: PromiseOrValue<string> | null
    ): VerifierUpdatedEventFilter;
    VerifierUpdated(
      currentAddr?: PromiseOrValue<string> | null,
      newAddr?: PromiseOrValue<string> | null
    ): VerifierUpdatedEventFilter;

    "Withdrawn(address,address,uint256,uint256,address,uint256)"(
      token?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: PromiseOrValue<BigNumberish> | null,
      nullifierHash?: null,
      relayer?: null,
      fee?: null
    ): WithdrawnEventFilter;
    Withdrawn(
      token?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: PromiseOrValue<BigNumberish> | null,
      nullifierHash?: null,
      relayer?: null,
      fee?: null
    ): WithdrawnEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
