/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface ITreasuryInterface extends utils.Interface {
  functions: {
    "priceOf(address)": FunctionFragment;
    "supportedPayment(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "priceOf" | "supportedPayment"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "priceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedPayment",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "priceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportedPayment",
    data: BytesLike
  ): Result;

  events: {
    "PaymentRemoved(address)": EventFragment;
    "PaymentsRemoved()": EventFragment;
    "PaymentsUpdated(address[])": EventFragment;
    "PriceUpdated(address,uint256,uint256)": EventFragment;
    "PricesUpdated(address[],uint256[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PaymentRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentsRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PricesUpdated"): EventFragment;
}

export interface PaymentRemovedEventObject {
  token: string;
}
export type PaymentRemovedEvent = TypedEvent<
  [string],
  PaymentRemovedEventObject
>;

export type PaymentRemovedEventFilter = TypedEventFilter<PaymentRemovedEvent>;

export interface PaymentsRemovedEventObject {}
export type PaymentsRemovedEvent = TypedEvent<[], PaymentsRemovedEventObject>;

export type PaymentsRemovedEventFilter = TypedEventFilter<PaymentsRemovedEvent>;

export interface PaymentsUpdatedEventObject {
  tokens: string[];
}
export type PaymentsUpdatedEvent = TypedEvent<
  [string[]],
  PaymentsUpdatedEventObject
>;

export type PaymentsUpdatedEventFilter = TypedEventFilter<PaymentsUpdatedEvent>;

export interface PriceUpdatedEventObject {
  token: string;
  from: BigNumber;
  to: BigNumber;
}
export type PriceUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  PriceUpdatedEventObject
>;

export type PriceUpdatedEventFilter = TypedEventFilter<PriceUpdatedEvent>;

export interface PricesUpdatedEventObject {
  tokens: string[];
  prices: BigNumber[];
}
export type PricesUpdatedEvent = TypedEvent<
  [string[], BigNumber[]],
  PricesUpdatedEventObject
>;

export type PricesUpdatedEventFilter = TypedEventFilter<PricesUpdatedEvent>;

export interface ITreasury extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ITreasuryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    priceOf(
      token_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    supportedPayment(
      token_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  priceOf(
    token_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  supportedPayment(
    token_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    priceOf(
      token_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportedPayment(
      token_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "PaymentRemoved(address)"(
      token?: PromiseOrValue<string> | null
    ): PaymentRemovedEventFilter;
    PaymentRemoved(
      token?: PromiseOrValue<string> | null
    ): PaymentRemovedEventFilter;

    "PaymentsRemoved()"(): PaymentsRemovedEventFilter;
    PaymentsRemoved(): PaymentsRemovedEventFilter;

    "PaymentsUpdated(address[])"(
      tokens?: PromiseOrValue<string>[] | null
    ): PaymentsUpdatedEventFilter;
    PaymentsUpdated(
      tokens?: PromiseOrValue<string>[] | null
    ): PaymentsUpdatedEventFilter;

    "PriceUpdated(address,uint256,uint256)"(
      token?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<BigNumberish> | null,
      to?: PromiseOrValue<BigNumberish> | null
    ): PriceUpdatedEventFilter;
    PriceUpdated(
      token?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<BigNumberish> | null,
      to?: PromiseOrValue<BigNumberish> | null
    ): PriceUpdatedEventFilter;

    "PricesUpdated(address[],uint256[])"(
      tokens?: PromiseOrValue<string>[] | null,
      prices?: PromiseOrValue<BigNumberish>[] | null
    ): PricesUpdatedEventFilter;
    PricesUpdated(
      tokens?: PromiseOrValue<string>[] | null,
      prices?: PromiseOrValue<BigNumberish>[] | null
    ): PricesUpdatedEventFilter;
  };

  estimateGas: {
    priceOf(
      token_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportedPayment(
      token_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    priceOf(
      token_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportedPayment(
      token_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
