/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface ICommandGateInterface extends utils.Interface {
  functions: {
    "depositERC20PermitWithCommand(address,uint256,uint256,uint8,bytes32,bytes32,bytes4,address,bytes)": FunctionFragment;
    "depositERC20WithCommand(address,uint256,bytes4,address,bytes)": FunctionFragment;
    "depositERC721MultiWithCommand(uint256[],address[],bytes[])": FunctionFragment;
    "depositNativeTokenWithCommand(address,bytes4,bytes)": FunctionFragment;
    "updateTreasury(address)": FunctionFragment;
    "whitelistAddress(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "depositERC20PermitWithCommand"
      | "depositERC20WithCommand"
      | "depositERC721MultiWithCommand"
      | "depositNativeTokenWithCommand"
      | "updateTreasury"
      | "whitelistAddress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "depositERC20PermitWithCommand",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositERC20WithCommand",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositERC721MultiWithCommand",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositNativeTokenWithCommand",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTreasury",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistAddress",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "depositERC20PermitWithCommand",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositERC20WithCommand",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositERC721MultiWithCommand",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositNativeTokenWithCommand",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistAddress",
    data: BytesLike
  ): Result;

  events: {
    "Commanded(address,bytes4,bytes,address,address,uint256)": EventFragment;
    "Whitelisted(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Commanded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Whitelisted"): EventFragment;
}

export interface CommandedEventObject {
  to: string;
  functionSelector: string;
  params: string;
  from: string;
  token: string;
  value: BigNumber;
}
export type CommandedEvent = TypedEvent<
  [string, string, string, string, string, BigNumber],
  CommandedEventObject
>;

export type CommandedEventFilter = TypedEventFilter<CommandedEvent>;

export interface WhitelistedEventObject {
  addr: string;
}
export type WhitelistedEvent = TypedEvent<[string], WhitelistedEventObject>;

export type WhitelistedEventFilter = TypedEventFilter<WhitelistedEvent>;

export interface ICommandGate extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICommandGateInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    depositERC20PermitWithCommand(
      token_: PromiseOrValue<string>,
      value_: PromiseOrValue<BigNumberish>,
      deadline_: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      fnSig_: PromiseOrValue<BytesLike>,
      contract_: PromiseOrValue<string>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositERC20WithCommand(
      token_: PromiseOrValue<string>,
      value_: PromiseOrValue<BigNumberish>,
      fnSig_: PromiseOrValue<BytesLike>,
      contract_: PromiseOrValue<string>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositERC721MultiWithCommand(
      tokenIds_: PromiseOrValue<BigNumberish>[],
      contracts_: PromiseOrValue<string>[],
      data_: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositNativeTokenWithCommand(
      contract_: PromiseOrValue<string>,
      fnSig_: PromiseOrValue<BytesLike>,
      params_: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateTreasury(
      treasury_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    whitelistAddress(
      addr_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  depositERC20PermitWithCommand(
    token_: PromiseOrValue<string>,
    value_: PromiseOrValue<BigNumberish>,
    deadline_: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    fnSig_: PromiseOrValue<BytesLike>,
    contract_: PromiseOrValue<string>,
    data_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositERC20WithCommand(
    token_: PromiseOrValue<string>,
    value_: PromiseOrValue<BigNumberish>,
    fnSig_: PromiseOrValue<BytesLike>,
    contract_: PromiseOrValue<string>,
    data_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositERC721MultiWithCommand(
    tokenIds_: PromiseOrValue<BigNumberish>[],
    contracts_: PromiseOrValue<string>[],
    data_: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositNativeTokenWithCommand(
    contract_: PromiseOrValue<string>,
    fnSig_: PromiseOrValue<BytesLike>,
    params_: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateTreasury(
    treasury_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  whitelistAddress(
    addr_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    depositERC20PermitWithCommand(
      token_: PromiseOrValue<string>,
      value_: PromiseOrValue<BigNumberish>,
      deadline_: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      fnSig_: PromiseOrValue<BytesLike>,
      contract_: PromiseOrValue<string>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositERC20WithCommand(
      token_: PromiseOrValue<string>,
      value_: PromiseOrValue<BigNumberish>,
      fnSig_: PromiseOrValue<BytesLike>,
      contract_: PromiseOrValue<string>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositERC721MultiWithCommand(
      tokenIds_: PromiseOrValue<BigNumberish>[],
      contracts_: PromiseOrValue<string>[],
      data_: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    depositNativeTokenWithCommand(
      contract_: PromiseOrValue<string>,
      fnSig_: PromiseOrValue<BytesLike>,
      params_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTreasury(
      treasury_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistAddress(
      addr_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Commanded(address,bytes4,bytes,address,address,uint256)"(
      to?: PromiseOrValue<string> | null,
      functionSelector?: PromiseOrValue<BytesLike> | null,
      params?: PromiseOrValue<BytesLike> | null,
      from?: null,
      token?: null,
      value?: null
    ): CommandedEventFilter;
    Commanded(
      to?: PromiseOrValue<string> | null,
      functionSelector?: PromiseOrValue<BytesLike> | null,
      params?: PromiseOrValue<BytesLike> | null,
      from?: null,
      token?: null,
      value?: null
    ): CommandedEventFilter;

    "Whitelisted(address)"(
      addr?: PromiseOrValue<string> | null
    ): WhitelistedEventFilter;
    Whitelisted(addr?: PromiseOrValue<string> | null): WhitelistedEventFilter;
  };

  estimateGas: {
    depositERC20PermitWithCommand(
      token_: PromiseOrValue<string>,
      value_: PromiseOrValue<BigNumberish>,
      deadline_: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      fnSig_: PromiseOrValue<BytesLike>,
      contract_: PromiseOrValue<string>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositERC20WithCommand(
      token_: PromiseOrValue<string>,
      value_: PromiseOrValue<BigNumberish>,
      fnSig_: PromiseOrValue<BytesLike>,
      contract_: PromiseOrValue<string>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositERC721MultiWithCommand(
      tokenIds_: PromiseOrValue<BigNumberish>[],
      contracts_: PromiseOrValue<string>[],
      data_: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositNativeTokenWithCommand(
      contract_: PromiseOrValue<string>,
      fnSig_: PromiseOrValue<BytesLike>,
      params_: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateTreasury(
      treasury_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    whitelistAddress(
      addr_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    depositERC20PermitWithCommand(
      token_: PromiseOrValue<string>,
      value_: PromiseOrValue<BigNumberish>,
      deadline_: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      fnSig_: PromiseOrValue<BytesLike>,
      contract_: PromiseOrValue<string>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositERC20WithCommand(
      token_: PromiseOrValue<string>,
      value_: PromiseOrValue<BigNumberish>,
      fnSig_: PromiseOrValue<BytesLike>,
      contract_: PromiseOrValue<string>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositERC721MultiWithCommand(
      tokenIds_: PromiseOrValue<BigNumberish>[],
      contracts_: PromiseOrValue<string>[],
      data_: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositNativeTokenWithCommand(
      contract_: PromiseOrValue<string>,
      fnSig_: PromiseOrValue<BytesLike>,
      params_: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateTreasury(
      treasury_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    whitelistAddress(
      addr_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
