/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace IZKBridge {
  export type InputStruct = {
    root: PromiseOrValue<BigNumberish>;
    value: PromiseOrValue<BigNumberish>;
    token: PromiseOrValue<string>;
    nullifierHash: PromiseOrValue<BigNumberish>;
    relayer: PromiseOrValue<string>;
    recipient: PromiseOrValue<string>;
  };

  export type InputStructOutput = [
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    string,
    string
  ] & {
    root: BigNumber;
    value: BigNumber;
    token: string;
    nullifierHash: BigNumber;
    relayer: string;
    recipient: string;
  };
}

export interface ZKBridgeInterface extends utils.Interface {
  functions: {
    "VERSION()": FunctionFragment;
    "addBridgeState(uint256)": FunctionFragment;
    "addWrappedTokens(address[],address[])": FunctionFragment;
    "authority()": FunctionFragment;
    "deposit(address,address,uint256,uint256)": FunctionFragment;
    "recoverERC20(address,uint256)": FunctionFragment;
    "recoverNative()": FunctionFragment;
    "updateAuthority(address)": FunctionFragment;
    "updateVerifier(address)": FunctionFragment;
    "vault()": FunctionFragment;
    "verifier()": FunctionFragment;
    "withdraw(address,address,uint256,(uint256,uint256,address,uint256,address,address),bytes)": FunctionFragment;
    "wrapped(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "VERSION"
      | "addBridgeState"
      | "addWrappedTokens"
      | "authority"
      | "deposit"
      | "recoverERC20"
      | "recoverNative"
      | "updateAuthority"
      | "updateVerifier"
      | "vault"
      | "verifier"
      | "withdraw"
      | "wrapped"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addBridgeState",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "addWrappedTokens",
    values: [PromiseOrValue<string>[], PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(functionFragment: "authority", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverERC20",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverNative",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateAuthority",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateVerifier",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;
  encodeFunctionData(functionFragment: "verifier", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      IZKBridge.InputStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "wrapped",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addBridgeState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addWrappedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "authority", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verifier", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wrapped", data: BytesLike): Result;

  events: {
    "AuthorityUpdated(address,address)": EventFragment;
    "Deposited(address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "Forwarded(address,uint256)": EventFragment;
    "NewBridgeState(uint256)": EventFragment;
    "VaultUpdated(address,address)": EventFragment;
    "VerifierUpdated(address,address)": EventFragment;
    "Withdrawn(address,address,uint256,uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuthorityUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Forwarded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewBridgeState"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VerifierUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export interface AuthorityUpdatedEventObject {
  from: string;
  to: string;
}
export type AuthorityUpdatedEvent = TypedEvent<
  [string, string],
  AuthorityUpdatedEventObject
>;

export type AuthorityUpdatedEventFilter =
  TypedEventFilter<AuthorityUpdatedEvent>;

export interface DepositedEventObject {
  token: string;
  account: string;
  value: BigNumber;
  root: BigNumber;
  leafIdx: BigNumber;
  commitment: BigNumber;
}
export type DepositedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  DepositedEventObject
>;

export type DepositedEventFilter = TypedEventFilter<DepositedEvent>;

export interface ForwardedEventObject {
  from: string;
  amount: BigNumber;
}
export type ForwardedEvent = TypedEvent<
  [string, BigNumber],
  ForwardedEventObject
>;

export type ForwardedEventFilter = TypedEventFilter<ForwardedEvent>;

export interface NewBridgeStateEventObject {
  stateRoot: BigNumber;
}
export type NewBridgeStateEvent = TypedEvent<
  [BigNumber],
  NewBridgeStateEventObject
>;

export type NewBridgeStateEventFilter = TypedEventFilter<NewBridgeStateEvent>;

export interface VaultUpdatedEventObject {
  from: string;
  to: string;
}
export type VaultUpdatedEvent = TypedEvent<
  [string, string],
  VaultUpdatedEventObject
>;

export type VaultUpdatedEventFilter = TypedEventFilter<VaultUpdatedEvent>;

export interface VerifierUpdatedEventObject {
  currentAddr: string;
  newAddr: string;
}
export type VerifierUpdatedEvent = TypedEvent<
  [string, string],
  VerifierUpdatedEventObject
>;

export type VerifierUpdatedEventFilter = TypedEventFilter<VerifierUpdatedEvent>;

export interface WithdrawnEventObject {
  token: string;
  to: string;
  value: BigNumber;
  nullifierHash: BigNumber;
  relayer: string;
  fee: BigNumber;
}
export type WithdrawnEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, string, BigNumber],
  WithdrawnEventObject
>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface ZKBridge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ZKBridgeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    VERSION(overrides?: CallOverrides): Promise<[string]>;

    addBridgeState(
      stateRoot_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addWrappedTokens(
      tokens_: PromiseOrValue<string>[],
      wrappers_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    authority(
      overrides?: CallOverrides
    ): Promise<[string] & { authority_: string }>;

    deposit(
      account_: PromiseOrValue<string>,
      token_: PromiseOrValue<string>,
      value_: PromiseOrValue<BigNumberish>,
      commitment_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    recoverERC20(
      token_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    recoverNative(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateAuthority(
      authority_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateVerifier(
      verifier_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vault(overrides?: CallOverrides): Promise<[string]>;

    verifier(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      fee_: PromiseOrValue<BigNumberish>,
      input_: IZKBridge.InputStruct,
      proofs_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    wrapped(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  VERSION(overrides?: CallOverrides): Promise<string>;

  addBridgeState(
    stateRoot_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addWrappedTokens(
    tokens_: PromiseOrValue<string>[],
    wrappers_: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  authority(overrides?: CallOverrides): Promise<string>;

  deposit(
    account_: PromiseOrValue<string>,
    token_: PromiseOrValue<string>,
    value_: PromiseOrValue<BigNumberish>,
    commitment_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  recoverERC20(
    token_: PromiseOrValue<string>,
    amount_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  recoverNative(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateAuthority(
    authority_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateVerifier(
    verifier_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vault(overrides?: CallOverrides): Promise<string>;

  verifier(overrides?: CallOverrides): Promise<string>;

  withdraw(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    fee_: PromiseOrValue<BigNumberish>,
    input_: IZKBridge.InputStruct,
    proofs_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  wrapped(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    VERSION(overrides?: CallOverrides): Promise<string>;

    addBridgeState(
      stateRoot_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addWrappedTokens(
      tokens_: PromiseOrValue<string>[],
      wrappers_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    authority(overrides?: CallOverrides): Promise<string>;

    deposit(
      account_: PromiseOrValue<string>,
      token_: PromiseOrValue<string>,
      value_: PromiseOrValue<BigNumberish>,
      commitment_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    recoverERC20(
      token_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    recoverNative(overrides?: CallOverrides): Promise<void>;

    updateAuthority(
      authority_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateVerifier(
      verifier_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    vault(overrides?: CallOverrides): Promise<string>;

    verifier(overrides?: CallOverrides): Promise<string>;

    withdraw(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      fee_: PromiseOrValue<BigNumberish>,
      input_: IZKBridge.InputStruct,
      proofs_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    wrapped(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "AuthorityUpdated(address,address)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): AuthorityUpdatedEventFilter;
    AuthorityUpdated(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): AuthorityUpdatedEventFilter;

    "Deposited(address,address,uint256,uint256,uint256,uint256)"(
      token?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      value?: PromiseOrValue<BigNumberish> | null,
      root?: null,
      leafIdx?: null,
      commitment?: null
    ): DepositedEventFilter;
    Deposited(
      token?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      value?: PromiseOrValue<BigNumberish> | null,
      root?: null,
      leafIdx?: null,
      commitment?: null
    ): DepositedEventFilter;

    "Forwarded(address,uint256)"(
      from?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): ForwardedEventFilter;
    Forwarded(
      from?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): ForwardedEventFilter;

    "NewBridgeState(uint256)"(
      stateRoot?: PromiseOrValue<BigNumberish> | null
    ): NewBridgeStateEventFilter;
    NewBridgeState(
      stateRoot?: PromiseOrValue<BigNumberish> | null
    ): NewBridgeStateEventFilter;

    "VaultUpdated(address,address)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): VaultUpdatedEventFilter;
    VaultUpdated(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): VaultUpdatedEventFilter;

    "VerifierUpdated(address,address)"(
      currentAddr?: PromiseOrValue<string> | null,
      newAddr?: PromiseOrValue<string> | null
    ): VerifierUpdatedEventFilter;
    VerifierUpdated(
      currentAddr?: PromiseOrValue<string> | null,
      newAddr?: PromiseOrValue<string> | null
    ): VerifierUpdatedEventFilter;

    "Withdrawn(address,address,uint256,uint256,address,uint256)"(
      token?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: PromiseOrValue<BigNumberish> | null,
      nullifierHash?: null,
      relayer?: null,
      fee?: null
    ): WithdrawnEventFilter;
    Withdrawn(
      token?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: PromiseOrValue<BigNumberish> | null,
      nullifierHash?: null,
      relayer?: null,
      fee?: null
    ): WithdrawnEventFilter;
  };

  estimateGas: {
    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    addBridgeState(
      stateRoot_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addWrappedTokens(
      tokens_: PromiseOrValue<string>[],
      wrappers_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    authority(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      account_: PromiseOrValue<string>,
      token_: PromiseOrValue<string>,
      value_: PromiseOrValue<BigNumberish>,
      commitment_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    recoverERC20(
      token_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    recoverNative(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateAuthority(
      authority_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateVerifier(
      verifier_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    verifier(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      fee_: PromiseOrValue<BigNumberish>,
      input_: IZKBridge.InputStruct,
      proofs_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    wrapped(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addBridgeState(
      stateRoot_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addWrappedTokens(
      tokens_: PromiseOrValue<string>[],
      wrappers_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    authority(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      account_: PromiseOrValue<string>,
      token_: PromiseOrValue<string>,
      value_: PromiseOrValue<BigNumberish>,
      commitment_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    recoverERC20(
      token_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    recoverNative(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateAuthority(
      authority_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateVerifier(
      verifier_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    verifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      fee_: PromiseOrValue<BigNumberish>,
      input_: IZKBridge.InputStruct,
      proofs_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    wrapped(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
