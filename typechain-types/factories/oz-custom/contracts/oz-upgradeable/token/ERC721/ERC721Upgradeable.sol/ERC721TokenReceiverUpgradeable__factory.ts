/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  ERC721TokenReceiverUpgradeable,
  ERC721TokenReceiverUpgradeableInterface,
} from "../../../../../../../oz-custom/contracts/oz-upgradeable/token/ERC721/ERC721Upgradeable.sol/ERC721TokenReceiverUpgradeable";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onERC721Received",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class ERC721TokenReceiverUpgradeable__factory {
  static readonly abi = _abi;
  static createInterface(): ERC721TokenReceiverUpgradeableInterface {
    return new utils.Interface(_abi) as ERC721TokenReceiverUpgradeableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC721TokenReceiverUpgradeable {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ERC721TokenReceiverUpgradeable;
  }
}
