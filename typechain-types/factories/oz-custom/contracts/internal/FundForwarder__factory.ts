/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  FundForwarder,
  FundForwarderInterface,
} from "../../../../oz-custom/contracts/internal/FundForwarder";

const _abi = [
  {
    inputs: [],
    name: "FundForwarder__ForwardFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "Transferable__InvalidArguments",
    type: "error",
  },
  {
    inputs: [],
    name: "Transferable__TransferFailed",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Forwarded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "VaultUpdated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount_",
        type: "uint256",
      },
    ],
    name: "recoverERC20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "recoverNative",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "vault",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

export class FundForwarder__factory {
  static readonly abi = _abi;
  static createInterface(): FundForwarderInterface {
    return new utils.Interface(_abi) as FundForwarderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FundForwarder {
    return new Contract(address, _abi, signerOrProvider) as FundForwarder;
  }
}
