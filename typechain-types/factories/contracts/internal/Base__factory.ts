/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { Base, BaseInterface } from "../../../contracts/internal/Base";

const _abi = [
  {
    inputs: [],
    name: "Base__AlreadySet",
    type: "error",
  },
  {
    inputs: [],
    name: "Base__Unauthorized",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "contract IAuthority",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "contract IAuthority",
        name: "to",
        type: "address",
      },
    ],
    name: "AuthorityUpdated",
    type: "event",
  },
  {
    inputs: [],
    name: "authority",
    outputs: [
      {
        internalType: "contract IAuthority",
        name: "authority_",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IAuthority",
        name: "authority_",
        type: "address",
      },
    ],
    name: "updateAuthority",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class Base__factory {
  static readonly abi = _abi;
  static createInterface(): BaseInterface {
    return new utils.Interface(_abi) as BaseInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Base {
    return new Contract(address, _abi, signerOrProvider) as Base;
  }
}
