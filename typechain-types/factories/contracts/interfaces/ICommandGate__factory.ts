/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  ICommandGate,
  ICommandGateInterface,
} from "../../../contracts/interfaces/ICommandGate";

const _abi = [
  {
    inputs: [],
    name: "CommandGate__ExecutionFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "CommandGate__Expired",
    type: "error",
  },
  {
    inputs: [],
    name: "CommandGate__InvalidArgument",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "CommandGate__UnknownAddress",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bytes4",
        name: "functionSelector",
        type: "bytes4",
      },
      {
        indexed: true,
        internalType: "bytes",
        name: "params",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Commanded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "Whitelisted",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20Permit",
        name: "token_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "deadline_",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
      {
        internalType: "bytes4",
        name: "fnSig_",
        type: "bytes4",
      },
      {
        internalType: "address",
        name: "contract_",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data_",
        type: "bytes",
      },
    ],
    name: "depositERC20PermitWithCommand",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value_",
        type: "uint256",
      },
      {
        internalType: "bytes4",
        name: "fnSig_",
        type: "bytes4",
      },
      {
        internalType: "address",
        name: "contract_",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data_",
        type: "bytes",
      },
    ],
    name: "depositERC20WithCommand",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "tokenIds_",
        type: "uint256[]",
      },
      {
        internalType: "address[]",
        name: "contracts_",
        type: "address[]",
      },
      {
        internalType: "bytes[]",
        name: "data_",
        type: "bytes[]",
      },
    ],
    name: "depositERC721MultiWithCommand",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "contract_",
        type: "address",
      },
      {
        internalType: "bytes4",
        name: "fnSig_",
        type: "bytes4",
      },
      {
        internalType: "bytes",
        name: "params_",
        type: "bytes",
      },
    ],
    name: "depositNativeTokenWithCommand",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ITreasury",
        name: "treasury_",
        type: "address",
      },
    ],
    name: "updateTreasury",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr_",
        type: "address",
      },
    ],
    name: "whitelistAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class ICommandGate__factory {
  static readonly abi = _abi;
  static createInterface(): ICommandGateInterface {
    return new utils.Interface(_abi) as ICommandGateInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ICommandGate {
    return new Contract(address, _abi, signerOrProvider) as ICommandGate;
  }
}
