/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  MultichainDeployer,
  MultichainDeployerInterface,
} from "../../contracts/MultichainDeployer";

const _abi = [
  {
    inputs: [],
    name: "Create2__DeploymentFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "Create2__InsufficientBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "Create2__ZeroLengthByteCode",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "instance",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "salt",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "bytecodeHash",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "string",
        name: "factory",
        type: "string",
      },
    ],
    name: "Deployed",
    type: "event",
  },
  {
    inputs: [],
    name: "VERSION",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount_",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "salt_",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "bytecode_",
        type: "bytes",
      },
    ],
    name: "deploy",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "salt_",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "bytecodeHash_",
        type: "bytes32",
      },
    ],
    name: "instanceOf",
    outputs: [
      {
        internalType: "address",
        name: "instance",
        type: "address",
      },
      {
        internalType: "bool",
        name: "isDeployed",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506104a1806100206000396000f3fe6080604052600436106100345760003560e01c806366cfa05714610039578063edcd56ed1461004e578063ffa1ad741461009f575b600080fd5b61004c61004736600461035d565b6100e1565b005b34801561005a57600080fd5b5061006e6100693660046103dd565b610128565b6040805173ffffffffffffffffffffffffffffffffffffffff90931683529015156020830152015b60405180910390f35b3480156100ab57600080fd5b506100d37f9eea8cb98c11fea36be219299200e6b67153ef85e64f26fbca079445a66e02d281565b604051908152602001610096565b610122848484848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506101d492505050565b50505050565b6000806101b18484604080517fff000000000000000000000000000000000000000000000000000000000000006020808301919091523060601b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660218301526035820194909452605580820193909352815180820390930183526075019052805191012090565b9473ffffffffffffffffffffffffffffffffffffffff86163b1515945092505050565b60006101e1848484610285565b90508073ffffffffffffffffffffffffffffffffffffffff163f838273ffffffffffffffffffffffffffffffffffffffff167f82471448afe2356524b15e64e9baaa819fba9008481ce17e1c78c3bf87fc22b560405180604001604052600f8152806020017f437265617465324465706c6f796572000000000000000000000000000000000081525060405161027791906103ff565b60405180910390a450505050565b600080844710156102c2576040517f99be5c9500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82516000036102fd576040517f0233950600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8383516020850187f5905073ffffffffffffffffffffffffffffffffffffffff8116610355576040517f4294884500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b949350505050565b6000806000806060858703121561037357600080fd5b8435935060208501359250604085013567ffffffffffffffff8082111561039957600080fd5b818701915087601f8301126103ad57600080fd5b8135818111156103bc57600080fd5b8860208285010111156103ce57600080fd5b95989497505060200194505050565b600080604083850312156103f057600080fd5b50508035926020909101359150565b600060208083528351808285015260005b8181101561042c57858101830151858201604001528201610410565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f830116850101925050509291505056fea264697066735822122066f6d2cf9c690c9b298183d34588b6a48ab524152d32acf0d4562a1666e6fca564736f6c63430008110033";

type MultichainDeployerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MultichainDeployerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MultichainDeployer__factory extends ContractFactory {
  constructor(...args: MultichainDeployerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MultichainDeployer> {
    return super.deploy(overrides || {}) as Promise<MultichainDeployer>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MultichainDeployer {
    return super.attach(address) as MultichainDeployer;
  }
  override connect(signer: Signer): MultichainDeployer__factory {
    return super.connect(signer) as MultichainDeployer__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MultichainDeployerInterface {
    return new utils.Interface(_abi) as MultichainDeployerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MultichainDeployer {
    return new Contract(address, _abi, signerOrProvider) as MultichainDeployer;
  }
}
