/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AggregatorV3Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AggregatorV3Interface__factory>;
    getContractFactory(
      name: "Authority",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Authority__factory>;
    getContractFactory(
      name: "CommandGate",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CommandGate__factory>;
    getContractFactory(
      name: "IAuthority",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAuthority__factory>;
    getContractFactory(
      name: "ICommandGate",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICommandGate__factory>;
    getContractFactory(
      name: "IMultichainDeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMultichainDeployer__factory>;
    getContractFactory(
      name: "ITreasury",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITreasury__factory>;
    getContractFactory(
      name: "IVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVerifier__factory>;
    getContractFactory(
      name: "IZKBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IZKBridge__factory>;
    getContractFactory(
      name: "BaseUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseUpgradeable__factory>;
    getContractFactory(
      name: "Base",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Base__factory>;
    getContractFactory(
      name: "PoseidonT3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoseidonT3__factory>;
    getContractFactory(
      name: "Roles",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Roles__factory>;
    getContractFactory(
      name: "MultichainDeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultichainDeployer__factory>;
    getContractFactory(
      name: "PMToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PMToken__factory>;
    getContractFactory(
      name: "Treasury",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Treasury__factory>;
    getContractFactory(
      name: "PlonkVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PlonkVerifier__factory>;
    getContractFactory(
      name: "ZKBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZKBridge__factory>;
    getContractFactory(
      name: "BlacklistableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BlacklistableUpgradeable__factory>;
    getContractFactory(
      name: "IBlacklistableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBlacklistableUpgradeable__factory>;
    getContractFactory(
      name: "ISignableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISignableUpgradeable__factory>;
    getContractFactory(
      name: "IWithdrawableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWithdrawableUpgradeable__factory>;
    getContractFactory(
      name: "ProxyCheckerUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProxyCheckerUpgradeable__factory>;
    getContractFactory(
      name: "SignableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SignableUpgradeable__factory>;
    getContractFactory(
      name: "TransferableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransferableUpgradeable__factory>;
    getContractFactory(
      name: "WithdrawableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WithdrawableUpgradeable__factory>;
    getContractFactory(
      name: "Create2Deployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Create2Deployer__factory>;
    getContractFactory(
      name: "Create3Deployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Create3Deployer__factory>;
    getContractFactory(
      name: "DeterministicDeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DeterministicDeployer__factory>;
    getContractFactory(
      name: "FundForwarder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FundForwarder__factory>;
    getContractFactory(
      name: "ISignable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISignable__factory>;
    getContractFactory(
      name: "IWithdrawable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWithdrawable__factory>;
    getContractFactory(
      name: "MultiDelegatecall",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultiDelegatecall__factory>;
    getContractFactory(
      name: "Signable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Signable__factory>;
    getContractFactory(
      name: "Create3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Create3__factory>;
    getContractFactory(
      name: "SSTORE2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SSTORE2__factory>;
    getContractFactory(
      name: "AccessControlEnumerableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlEnumerableUpgradeable__factory>;
    getContractFactory(
      name: "AccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlUpgradeable__factory>;
    getContractFactory(
      name: "IAccessControlEnumerableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlEnumerableUpgradeable__factory>;
    getContractFactory(
      name: "IAccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlUpgradeable__factory>;
    getContractFactory(
      name: "IERC1822ProxiableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1822ProxiableUpgradeable__factory>;
    getContractFactory(
      name: "IBeaconUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeaconUpgradeable__factory>;
    getContractFactory(
      name: "ERC1967UpgradeUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967UpgradeUpgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "UUPSUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UUPSUpgradeable__factory>;
    getContractFactory(
      name: "PausableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PausableUpgradeable__factory>;
    getContractFactory(
      name: "ReentrancyGuardUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuardUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "ERC721TokenReceiverUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721TokenReceiverUpgradeable__factory>;
    getContractFactory(
      name: "ERC721Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Upgradeable__factory>;
    getContractFactory(
      name: "IERC721MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC721Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Upgradeable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "EIP712Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EIP712Upgradeable__factory>;
    getContractFactory(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165Upgradeable__factory>;
    getContractFactory(
      name: "IERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165Upgradeable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Permit__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "ERC721TokenReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721TokenReceiver__factory>;
    getContractFactory(
      name: "IERC721Enumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Enumerable__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;

    getContractAt(
      name: "AggregatorV3Interface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AggregatorV3Interface>;
    getContractAt(
      name: "Authority",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Authority>;
    getContractAt(
      name: "CommandGate",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CommandGate>;
    getContractAt(
      name: "IAuthority",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAuthority>;
    getContractAt(
      name: "ICommandGate",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICommandGate>;
    getContractAt(
      name: "IMultichainDeployer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMultichainDeployer>;
    getContractAt(
      name: "ITreasury",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITreasury>;
    getContractAt(
      name: "IVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVerifier>;
    getContractAt(
      name: "IZKBridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IZKBridge>;
    getContractAt(
      name: "BaseUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseUpgradeable>;
    getContractAt(
      name: "Base",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Base>;
    getContractAt(
      name: "PoseidonT3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PoseidonT3>;
    getContractAt(
      name: "Roles",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Roles>;
    getContractAt(
      name: "MultichainDeployer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MultichainDeployer>;
    getContractAt(
      name: "PMToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PMToken>;
    getContractAt(
      name: "Treasury",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Treasury>;
    getContractAt(
      name: "PlonkVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PlonkVerifier>;
    getContractAt(
      name: "ZKBridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZKBridge>;
    getContractAt(
      name: "BlacklistableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BlacklistableUpgradeable>;
    getContractAt(
      name: "IBlacklistableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBlacklistableUpgradeable>;
    getContractAt(
      name: "ISignableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISignableUpgradeable>;
    getContractAt(
      name: "IWithdrawableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWithdrawableUpgradeable>;
    getContractAt(
      name: "ProxyCheckerUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProxyCheckerUpgradeable>;
    getContractAt(
      name: "SignableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SignableUpgradeable>;
    getContractAt(
      name: "TransferableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TransferableUpgradeable>;
    getContractAt(
      name: "WithdrawableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WithdrawableUpgradeable>;
    getContractAt(
      name: "Create2Deployer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Create2Deployer>;
    getContractAt(
      name: "Create3Deployer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Create3Deployer>;
    getContractAt(
      name: "DeterministicDeployer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DeterministicDeployer>;
    getContractAt(
      name: "FundForwarder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FundForwarder>;
    getContractAt(
      name: "ISignable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISignable>;
    getContractAt(
      name: "IWithdrawable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWithdrawable>;
    getContractAt(
      name: "MultiDelegatecall",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MultiDelegatecall>;
    getContractAt(
      name: "Signable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Signable>;
    getContractAt(
      name: "Create3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Create3>;
    getContractAt(
      name: "SSTORE2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SSTORE2>;
    getContractAt(
      name: "AccessControlEnumerableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlEnumerableUpgradeable>;
    getContractAt(
      name: "AccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlUpgradeable>;
    getContractAt(
      name: "IAccessControlEnumerableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlEnumerableUpgradeable>;
    getContractAt(
      name: "IAccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlUpgradeable>;
    getContractAt(
      name: "IERC1822ProxiableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1822ProxiableUpgradeable>;
    getContractAt(
      name: "IBeaconUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeaconUpgradeable>;
    getContractAt(
      name: "ERC1967UpgradeUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967UpgradeUpgradeable>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "UUPSUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UUPSUpgradeable>;
    getContractAt(
      name: "PausableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PausableUpgradeable>;
    getContractAt(
      name: "ReentrancyGuardUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuardUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "ERC721TokenReceiverUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721TokenReceiverUpgradeable>;
    getContractAt(
      name: "ERC721Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Upgradeable>;
    getContractAt(
      name: "IERC721MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721MetadataUpgradeable>;
    getContractAt(
      name: "IERC721Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Upgradeable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "EIP712Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EIP712Upgradeable>;
    getContractAt(
      name: "ERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165Upgradeable>;
    getContractAt(
      name: "IERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165Upgradeable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Permit>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "ERC721TokenReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721TokenReceiver>;
    getContractAt(
      name: "IERC721Enumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Enumerable>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
